# post message example 'van-gogh-realism/5'

import json
import boto3
import base64
from boto3 import client
import requests
import os

def lambda_handler(event, context):
    artist = event["rawQueryString"].split("/")[0]
    counter = int(event["rawQueryString"].split("/")[1]) 
    
    bucket_name = "painterstorage"
    s3_path = "generated/image ({}).png"
    s3_new_path = "image ({}).png"
    s3 = boto3.resource("s3")
    
    url = "http://207.53.234.71:5000/generate_image/" + artist
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36', "Upgrade-Insecure-Requests": "1","DNT": "1","Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8","Accept-Language": "en-US,en;q=0.5","Accept-Encoding": "gzip, deflate"}
   
    image_base64 = b'123'
    
    images = []
    filename = "tempImage{}.png"
    
    os.chdir("/tmp")
    
    for i in range(0, counter):
        try:
            image_base64 = requests.get(url, headers = headers)
            image_base64 = image_base64.text.encode('utf8')
            image_name = filename.format(i)
            with open(image_name, "wb") as temp:
                temp.write(base64.decodebytes(image_base64))
            images.append(image_name)
        except:
            image_base64 = b''
            images.append(image_base64)
            print("Could not connect to flask api")
    
    new_paths = []
    path = artist.split("/")[0] + "/generated/image ({}).png"
    
    start_counter = 0
    for i in range(1, 100):
        try:
            test_filename = path.format(str(i))
            s3.Object(bucket_name, test_filename).load()
        except:
            start_counter = i
            break
    
    if(start_counter != 0):
        for i in range(0, counter):
            try:
                new_path = path.format(start_counter)
                s3_client = boto3.client('s3')
                s3_client.upload_file(filename.format(i), bucket_name, new_path)
                new_paths.append(new_path)
                
                if (start_counter >= 101):
                    break
            except:
                print("Error writing to S3")
                break
        print(new_paths)
        return new_paths
    else:
        return "Generated is already full"